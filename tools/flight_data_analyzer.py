#!/usr/bin/env python3
"""
Flight Data Analyzer
====================

This Python script analyzes flight data logs generated by the RC Airplane SD logging system.
It creates comprehensive plots and analysis reports for flight performance evaluation.

Requirements:
- pandas
- matplotlib
- numpy
- seaborn (optional, for better plots)

Installation:
pip install pandas matplotlib numpy seaborn

Usage:
python flight_data_analyzer.py /path/to/log/directory
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os
import sys
from pathlib import Path
import json
from datetime import datetime
import argparse

class FlightDataAnalyzer:
    def __init__(self, log_directory):
        self.log_dir = Path(log_directory)
        self.flight_data = None
        self.telemetry_data = None
        self.events_data = None
        
    def load_data(self, session_id=None):
        """Load flight data from CSV files"""
        if session_id:
            session_dir = self.log_dir / "flights" / session_id
        else:
            # Find the most recent session
            flights_dir = self.log_dir / "flights"
            if flights_dir.exists():
                sessions = [d for d in flights_dir.iterdir() if d.is_dir()]
                if not sessions:
                    print("‚ùå No flight sessions found")
                    return False
                session_dir = max(sessions, key=lambda x: x.stat().st_mtime)
                print(f"üìÅ Loading most recent session: {session_dir.name}")
            else:
                print("‚ùå Flights directory not found")
                return False
        
        # Load flight data
        flight_csv = session_dir / "flight_data.csv"
        if flight_csv.exists():
            self.flight_data = pd.read_csv(flight_csv)
            self.flight_data['timestamp'] = self.flight_data['timestamp'] / 1000.0  # Convert to seconds
            print(f"‚úÖ Loaded {len(self.flight_data)} flight data points")
        
        # Load telemetry data
        telemetry_csv = session_dir / "telemetry.csv"
        if telemetry_csv.exists():
            self.telemetry_data = pd.read_csv(telemetry_csv)
            self.telemetry_data['timestamp'] = self.telemetry_data['timestamp'] / 1000.0
            print(f"‚úÖ Loaded {len(self.telemetry_data)} telemetry data points")
        
        # Load events
        events_json = self.log_dir / "logs" / "system_events.json"
        if events_json.exists():
            events = []
            with open(events_json, 'r') as f:
                for line in f:
                    try:
                        events.append(json.loads(line))
                    except json.JSONDecodeError:
                        continue
            if events:
                self.events_data = pd.DataFrame(events)
                self.events_data['timestamp'] = self.events_data['timestamp'] / 1000.0
                print(f"‚úÖ Loaded {len(self.events_data)} system events")
        
        return True
    
    def analyze_flight_performance(self):
        """Analyze flight performance metrics"""
        if self.flight_data is None:
            print("‚ùå No flight data available")
            return
        
        print("\nüìä Flight Performance Analysis")
        print("=" * 50)
        
        # Basic statistics
        duration = self.flight_data['timestamp'].max() - self.flight_data['timestamp'].min()
        print(f"Flight Duration: {duration:.1f} seconds ({duration/60:.1f} minutes)")
        print(f"Max Altitude: {self.flight_data['altitude'].max():.1f} m")
        print(f"Min Altitude: {self.flight_data['altitude'].min():.1f} m")
        print(f"Max Speed: {self.flight_data['speed'].max():.1f} m/s")
        print(f"Average Speed: {self.flight_data['speed'].mean():.1f} m/s")
        print(f"Max Roll: {self.flight_data['roll'].max():.1f}¬∞")
        print(f"Max Pitch: {self.flight_data['pitch'].max():.1f}¬∞")
        
        # Battery analysis
        battery_start = self.flight_data['battery_voltage'].iloc[0]
        battery_end = self.flight_data['battery_voltage'].iloc[-1]
        battery_drop = battery_start - battery_end
        print(f"Battery: {battery_start:.1f}V ‚Üí {battery_end:.1f}V (Drop: {battery_drop:.1f}V)")
        
        # Distance calculation (if GPS data available)
        if 'gps_lat' in self.flight_data.columns and not self.flight_data['gps_lat'].isna().all():
            distance = self.calculate_total_distance()
            print(f"Total Distance: {distance:.0f} m")
    
    def calculate_total_distance(self):
        """Calculate total flight distance from GPS coordinates"""
        def haversine_distance(lat1, lon1, lat2, lon2):
            R = 6371000  # Earth's radius in meters
            lat1, lon1, lat2, lon2 = map(np.radians, [lat1, lon1, lat2, lon2])
            dlat = lat2 - lat1
            dlon = lon2 - lon1
            a = np.sin(dlat/2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon/2)**2
            return 2 * R * np.arcsin(np.sqrt(a))
        
        distances = []
        for i in range(1, len(self.flight_data)):
            prev = self.flight_data.iloc[i-1]
            curr = self.flight_data.iloc[i]
            dist = haversine_distance(prev['gps_lat'], prev['gps_lon'], 
                                    curr['gps_lat'], curr['gps_lon'])
            distances.append(dist)
        
        return sum(distances)
    
    def create_plots(self, output_dir=None):
        """Create comprehensive flight analysis plots"""
        if self.flight_data is None:
            print("‚ùå No flight data available for plotting")
            return
        
        if output_dir:
            output_path = Path(output_dir)
            output_path.mkdir(exist_ok=True)
        else:
            output_path = Path("flight_analysis_plots")
            output_path.mkdir(exist_ok=True)
        
        print(f"\nüìà Creating plots in {output_path}")
        
        # Set up the plotting style
        plt.style.use('default')
        plt.rcParams['figure.figsize'] = (12, 8)
        
        # 1. Altitude and Speed Profile
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
        
        ax1.plot(self.flight_data['timestamp'], self.flight_data['altitude'], 'b-', linewidth=2)
        ax1.set_ylabel('Altitude (m)')
        ax1.set_title('Flight Altitude Profile')
        ax1.grid(True, alpha=0.3)
        
        ax2.plot(self.flight_data['timestamp'], self.flight_data['speed'], 'r-', linewidth=2)
        ax2.set_xlabel('Time (seconds)')
        ax2.set_ylabel('Speed (m/s)')
        ax2.set_title('Flight Speed Profile')
        ax2.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(output_path / "altitude_speed_profile.png", dpi=300, bbox_inches='tight')
        plt.close()
        
        # 2. Attitude (Roll, Pitch, Yaw)
        fig, axes = plt.subplots(3, 1, figsize=(12, 10))
        
        axes[0].plot(self.flight_data['timestamp'], self.flight_data['roll'], 'g-', linewidth=1.5)
        axes[0].set_ylabel('Roll (¬∞)')
        axes[0].set_title('Aircraft Attitude')
        axes[0].grid(True, alpha=0.3)
        
        axes[1].plot(self.flight_data['timestamp'], self.flight_data['pitch'], 'b-', linewidth=1.5)
        axes[1].set_ylabel('Pitch (¬∞)')
        axes[1].grid(True, alpha=0.3)
        
        axes[2].plot(self.flight_data['timestamp'], self.flight_data['yaw'], 'r-', linewidth=1.5)
        axes[2].set_xlabel('Time (seconds)')
        axes[2].set_ylabel('Yaw (¬∞)')
        axes[2].grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(output_path / "attitude_profile.png", dpi=300, bbox_inches='tight')
        plt.close()
        
        # 3. Control Inputs and Battery
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
        
        ax1.plot(self.flight_data['timestamp'], self.flight_data['throttle'], 'orange', linewidth=2)
        ax1.set_ylabel('Throttle (%)')
        ax1.set_title('Control Inputs and System Status')
        ax1.grid(True, alpha=0.3)
        
        ax2.plot(self.flight_data['timestamp'], self.flight_data['battery_voltage'], 'red', linewidth=2)
        ax2.set_xlabel('Time (seconds)')
        ax2.set_ylabel('Battery Voltage (V)')
        ax2.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(output_path / "controls_battery.png", dpi=300, bbox_inches='tight')
        plt.close()
        
        # 4. GPS Flight Path (if available)
        if 'gps_lat' in self.flight_data.columns and not self.flight_data['gps_lat'].isna().all():
            plt.figure(figsize=(10, 8))
            plt.plot(self.flight_data['gps_lon'], self.flight_data['gps_lat'], 'b-', linewidth=2, alpha=0.7)
            plt.plot(self.flight_data['gps_lon'].iloc[0], self.flight_data['gps_lat'].iloc[0], 'go', markersize=10, label='Start')
            plt.plot(self.flight_data['gps_lon'].iloc[-1], self.flight_data['gps_lat'].iloc[-1], 'ro', markersize=10, label='End')
            plt.xlabel('Longitude')
            plt.ylabel('Latitude')
            plt.title('GPS Flight Path')
            plt.legend()
            plt.grid(True, alpha=0.3)
            plt.axis('equal')
            plt.savefig(output_path / "gps_flight_path.png", dpi=300, bbox_inches='tight')
            plt.close()
        
        # 5. Telemetry Analysis (if available)
        if self.telemetry_data is not None:
            fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(12, 10))
            
            ax1.plot(self.telemetry_data['timestamp'], self.telemetry_data['rssi'], 'purple', linewidth=2)
            ax1.set_ylabel('RSSI (dBm)')
            ax1.set_title('Telemetry Quality Metrics')
            ax1.grid(True, alpha=0.3)
            
            ax2.plot(self.telemetry_data['timestamp'], self.telemetry_data['snr'], 'orange', linewidth=2)
            ax2.set_ylabel('SNR (dB)')
            ax2.grid(True, alpha=0.3)
            
            ax3.plot(self.telemetry_data['timestamp'], self.telemetry_data['packet_loss'], 'red', linewidth=2)
            ax3.set_xlabel('Time (seconds)')
            ax3.set_ylabel('Packet Loss (%)')
            ax3.grid(True, alpha=0.3)
            
            plt.tight_layout()
            plt.savefig(output_path / "telemetry_quality.png", dpi=300, bbox_inches='tight')
            plt.close()
        
        print(f"‚úÖ Plots saved to {output_path}")
    
    def generate_report(self, output_file=None):
        """Generate a comprehensive flight analysis report"""
        if output_file is None:
            output_file = "flight_analysis_report.txt"
        
        with open(output_file, 'w') as f:
            f.write("RC AIRPLANE FLIGHT ANALYSIS REPORT\n")
            f.write("=" * 50 + "\n")
            f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            if self.flight_data is not None:
                duration = self.flight_data['timestamp'].max() - self.flight_data['timestamp'].min()
                f.write(f"Flight Duration: {duration:.1f} seconds ({duration/60:.1f} minutes)\n")
                f.write(f"Data Points: {len(self.flight_data)}\n")
                f.write(f"Sampling Rate: {len(self.flight_data)/duration:.1f} Hz\n\n")
                
                f.write("ALTITUDE ANALYSIS:\n")
                f.write(f"  Max Altitude: {self.flight_data['altitude'].max():.1f} m\n")
                f.write(f"  Min Altitude: {self.flight_data['altitude'].min():.1f} m\n")
                f.write(f"  Average Altitude: {self.flight_data['altitude'].mean():.1f} m\n")
                f.write(f"  Altitude Std Dev: {self.flight_data['altitude'].std():.1f} m\n\n")
                
                f.write("SPEED ANALYSIS:\n")
                f.write(f"  Max Speed: {self.flight_data['speed'].max():.1f} m/s\n")
                f.write(f"  Average Speed: {self.flight_data['speed'].mean():.1f} m/s\n")
                f.write(f"  Speed Std Dev: {self.flight_data['speed'].std():.1f} m/s\n\n")
                
                f.write("ATTITUDE ANALYSIS:\n")
                f.write(f"  Max Roll: ¬±{abs(self.flight_data['roll']).max():.1f}¬∞\n")
                f.write(f"  Max Pitch: ¬±{abs(self.flight_data['pitch']).max():.1f}¬∞\n")
                f.write(f"  Heading Range: {self.flight_data['yaw'].max() - self.flight_data['yaw'].min():.1f}¬∞\n\n")
            
            if self.telemetry_data is not None:
                f.write("TELEMETRY ANALYSIS:\n")
                f.write(f"  Average RSSI: {self.telemetry_data['rssi'].mean():.1f} dBm\n")
                f.write(f"  Average SNR: {self.telemetry_data['snr'].mean():.1f} dB\n")
                f.write(f"  Average Packet Loss: {self.telemetry_data['packet_loss'].mean():.1f}%\n\n")
            
            if self.events_data is not None:
                f.write("SYSTEM EVENTS:\n")
                event_counts = self.events_data['level'].value_counts()
                for level, count in event_counts.items():
                    f.write(f"  {level}: {count} events\n")
        
        print(f"‚úÖ Report saved to {output_file}")

def main():
    parser = argparse.ArgumentParser(description='Analyze RC Airplane flight data logs')
    parser.add_argument('log_directory', help='Directory containing flight logs')
    parser.add_argument('--session', help='Specific session ID to analyze')
    parser.add_argument('--output', help='Output directory for plots and reports')
    parser.add_argument('--no-plots', action='store_true', help='Skip plot generation')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.log_directory):
        print(f"‚ùå Log directory not found: {args.log_directory}")
        sys.exit(1)
    
    # Create analyzer
    analyzer = FlightDataAnalyzer(args.log_directory)
    
    # Load data
    if not analyzer.load_data(args.session):
        print("‚ùå Failed to load flight data")
        sys.exit(1)
    
    # Perform analysis
    analyzer.analyze_flight_performance()
    
    # Generate plots
    if not args.no_plots:
        analyzer.create_plots(args.output)
    
    # Generate report
    output_file = None
    if args.output:
        output_file = os.path.join(args.output, "flight_analysis_report.txt")
    analyzer.generate_report(output_file)
    
    print("\n‚úÖ Flight data analysis completed!")
    print("üìä Check the generated plots and report for detailed insights")

if __name__ == "__main__":
    main()
